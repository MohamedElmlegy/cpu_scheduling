#include<iostream>

using namespace std;

void select(int timeAxis,int &nextArrival,int &currentProcess,int &currentBurst,int size,int burstTime[],int arrivalTime[],int priority[]){
    int cond=false;
    int higherPriority=INT_MAX;
    int min_i=0;

    // when last process arrives, so there is no need to be included as a new selection decision 
    if ((timeAxis == nextArrival) && (arrivalTime[size - 1] == nextArrival)) {
        nextArrival = INT_MAX;
    }


    for (int i = 0; i < size; i++)
    {   
        // update the next arrival time to take a new selection decision
        if(higherPriority!=INT_MAX && arrivalTime[i]>timeAxis){
            nextArrival=arrivalTime[i];
            cond=true;
        }
        else{
        // select the first arrived process with the highest priority
            if(burstTime[i]!=0 && priority[i]<higherPriority){
                min_i=i;
                higherPriority=priority[i];
            }
 

        }

        if (cond) break;
    }
    
    currentProcess = min_i;
    currentBurst = burstTime[currentProcess];
}
void preemptivePriority(int arry[], double &averageWaitingTime,int size,int processes[],int burstTime[],int arrivalTime[],int priority[]){
    int totalBurst=0;
    int timeAxis=0;
    int nextArrival=0;
    int currentProcess;
    int currentBurst;
    int waiting[50];  // limited to max 50 process
    

    //calculate total burst time
    for (int i = 0; i < size; i++)
    {
        totalBurst+=burstTime[i];
    }
    
    //Initialize the waiting array
    for (int i = 0; i < size; i++)
    {
        waiting[i]=-(arrivalTime[i]+burstTime[i]);
    }


    while(timeAxis<totalBurst){     //this condition violate when all process complete execution
        select(timeAxis,nextArrival,currentProcess,currentBurst,size,burstTime,arrivalTime,priority); //selection decision
        while(timeAxis<nextArrival && currentBurst!=0){  // new selection decision taken when it complete or there is another process arrived
            arry[timeAxis]=processes[currentProcess];
            timeAxis++;
            currentBurst--;
        }
        burstTime[currentProcess]=currentBurst;  // save the status of the currernt process before proceed to the decision 
        if (currentBurst == 0) waiting[currentProcess] += timeAxis;
    }

    //calculate average waiting time
    averageWaitingTime = 0;
    for (int i = 0; i < size; i++)
    {
        averageWaitingTime+=waiting[i] ;
    }
    averageWaitingTime /= size;
}
